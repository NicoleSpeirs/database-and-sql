  1. Write out a generic SELECT statement.

      SELECT birthday, birthday_card
      FROM friends
      WHERE birthday = June
      AND card_sent = false;

  2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

      Sweaty Feet Will Give Horrible Odors:
      SELECT
      FROM
      WHERE
      GROUP BY
      HAVING
      ORDER BY

      Sharks Fight Jellyfish With Guns! Hide on Land
      SELECT
      FROM
        JOIN
      WHERE
      GROUP BY
      HAVING
      ORDER BY
      LIMIT


  3. Given this dogs table, write queries to select the following pieces of data:

    Dogs table:
    id   |   name    | gender | age | weight |       breed        | intake_date | in_foster
    -------+-----------+--------+-----+--------+--------------------+-------------+------------
    10001 | Boujee    | F      |   3 |     36 | labrador poodle    | 2017-06-22  |
    10002 | Munchkin  | F      |   0 |      8 | dachsund chihuahua | 2017-01-13  | 2017-01-31
    10004 | Marley    | M      |   0 |     10 | labrador           | 2017-05-04  | 2016-06-20
    10003 | Lassie    | F      |   7 |     17 | collie shepherd    | 2016-07-05  | 2017-07-22
    10006 | Marmaduke | M      |   7 |    150 | great dane         | 2016-03-22  | 2016-05-15
    10007 | Rosco     | M      |   5 |    180 | rottweiler         | 2017-04-01  |



  Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

    * Display the name, gender, and age of all dogs that    are part Labrador.

      SELECT name, gender, age
      FROM dogs
      WHERE breed LIKE '%labrador%';

     name  | gender | age
    --------+--------+-----
   Boujee | F      |   3
   Marley | M      |   0


    * Display the ids of all dogs that are under 1 year old.

      SELECT id
      FROM dogs
      WHERE age < 1;

      id
    -------
    10002
    10004

    * Display the name and age of all dogs that are female and over 35lbs.

      SELECT name, age
      FROM dogs
      WHERE gender = 'F' AND weight > 35;

    name  | age
    -------+-----
    Boujee |   3


    * Display all of the information about all dogs that are not Shepherd mixes.

      SELECT *
      FROM dogs
      WHERE breed NOT LIKE '%shepherd%';

      id   |   name    | gender | age | weight |       breed        | intake_date | in_foster
    -------+-----------+--------+-----+--------+--------------------+-------------+------------
    10001 | Boujee    | F      |   3 |     36 | labrador poodle    | 2017-06-22  |
    10002 | Munchkin  | F      |   0 |      8 | dachsund chihuahua | 2017-01-13  | 2017-01-31
    10004 | Marley    | M      |   0 |     10 | labrador           | 2017-05-04  | 2016-06-20
    10006 | Marmaduke | M      |   7 |    150 | great dane         | 2016-03-22  | 2016-05-15
    10007 | Rosco     | M      |   5 |    180 | rottweiler         | 2017-04-01  |


    * Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

      SELECT id, age, weight, breed
      FROM dogs
      WHERE weight > 60 OR breed = 'great dane';

      id   | age | weight |   breed
    -------+-----+--------+------------
    10006 |   7 |    150 | great dane
    10007 |   5 |    180 | rottweiler

  4. Given this cats table, what records are returned from these queries?

    Cats table:
      id |   name   | gender | age | intake_date | adoption_date
    ----+----------+--------+-----+-------------+---------------
      1 | Mushi    | M      |   1 | 2016-01-09  | 2016-03-22
      2 | Seashell | F      |   7 | 2016-01-09  |
      3 | Azul     | M      |   3 | 2016-01-11  | 2016-04-17
      4 | Victoire | M      |   7 | 2016-01-11  | 2016-09-01
      5 | Nala     | F      |   1 | 2016-01-12  |



      SELECT name, adoption_date FROM cats;

      name   | adoption_date
    ----------+---------------
    Mushi    | 2016-03-22
    Seashell |
    Azul     | 2016-04-17
    Victoire | 2016-09-01
    Nala     |


      SELECT name, age FROM cats;

      name   | age
    ----------+-----
    Mushi    |   1
    Seashell |   7
    Azul     |   3
    Victoire |   7
    Nala     |   1


  5. From the cats table, write queries to select the following pieces of data.

    * Display all the information about all of the available cats.

      SELECT *
      FROM cats;


    * Display the name and sex of all cats who are 7 years old.

      SELECT name, gender
      FROM cats
      WHERE age = 7;

      name   | gender
    ---------+--------
    Seashell | F
    Victoire | M

    * Find all of the names of the cats, so you don’t choose duplicate names for new cats.

      SELECT name
      FROM cats;

      name
    ----------
    Mushi
    Seashell
    Azul
    Victoire
    Nala



  6. List each comparison operator and explain when you would use it. Include a real world example for each.

  >   greater than: if we have extra money and want to only buy things that cost more than $500.
  <   less than: if we spent all our money and can only buy things that cost under $5.
  =   equal to: if we are looking for all the items that are blue in color.
  <=  less than or equal to if we want to select inventory items that is running low in stock and see what items count is equal to 10 or bellow.
  >=  greater than or equal to: if we want to select inventory items where the price is more or equal to $10.
  !=  not equal to: if we want a list of all the pets at the shelter except those in foster care.
  <>  not equal to: If we have too many green shirts and we want to find all the shirts that are not green.
  LIKE  used to find the matches: can find article containing the word '%summer%' even if we dont know the full name.
  BETWEEN  match a value against a range of values: if we want to select all the cats between age of 1 and 5.
  IS TRUE/ IS FALSE returns boolean value true or false
  IS NULL determines is content in cell is null: can be use do determine if there is no value present.
  AND to test more than one condition where both conditions need to be true: select all the cats that are females and over the age of 1.
  OR  to test more than one condition where one condition needs to be true: select all the items that cost under $5 or items that are blue.
  NOT same as !=

  7. From the cats table, what data is returned from these queries?

    1) SELECT name FROM cats WHERE gender = ‘F’;

  ERROR:  column "‘f’" does not exist
  LINE 1: SELECT name FROM cats WHERE gender = ‘F’;

  If we fix the ‘F’ to 'F' we can get the correct results:

    name
    ----------
    Seashell
    Nala


    2) SELECT name FROM cats WHERE age <> 3;

    name
    ----------
    Mushi
    Seashell
    Victoire
    Nala

    3) SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;

    ERROR:  column "‘mushi’" does not exist
    LINE 1: SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;


    If we correct the quotes:
    SELECT ID FROM cats WHERE name != 'Mushi' AND gender = 'M';

     id
    ----
      3
      4